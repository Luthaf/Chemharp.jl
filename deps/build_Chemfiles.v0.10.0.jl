using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libchemfiles"], :libchemfiles),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Chemfiles_jll.jl/releases/download/Chemfiles-v0.10.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.aarch64-linux-gnu-cxx03.tar.gz", "53969609d437d3d29034195f7091d956b8ba524331c999298476e96f849c3af1"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.aarch64-linux-gnu-cxx11.tar.gz", "8127dfcf8425d1c7b860cfa8157fc231bea0df7ad62337b057c079645462b2ef"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.aarch64-linux-musl-cxx03.tar.gz", "af14b9afbce02254e405c7c364cb60eb2c74f39abe5ac40f83c9b350b2f6d8cd"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.aarch64-linux-musl-cxx11.tar.gz", "80522794313e34f1e1bd46d2558540bc7c636517c23c35d0cea4ed03934eaf9a"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.armv7l-linux-gnueabihf-cxx03.tar.gz", "61f5f959a44c9aded26aad9e0404300d8ce691df1b2456ce53f0211a8764c71f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.armv7l-linux-gnueabihf-cxx11.tar.gz", "104fc26912473518b42a7c7c04fe3e960588f97ab690ea6bf457991bcfe7c397"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.armv7l-linux-musleabihf-cxx03.tar.gz", "863712359cbf570d9d7d35f1291b4624e79025a76f16b52beebbe341bd5f8a59"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.armv7l-linux-musleabihf-cxx11.tar.gz", "363ec8ea146948ce2fc9d6b42a17b7c1846d44f1738b38bf3730d428018f4665"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.i686-linux-gnu-cxx03.tar.gz", "9cce2e630c8ea0889c5c55632aae0d855b17d78995cb8a8a3bcd9672437ad15d"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.i686-linux-gnu-cxx11.tar.gz", "c99f4de42fb52f349abfb7407dca8a8388d660c6876b8fe0634dc18f25d511ac"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.i686-linux-musl-cxx03.tar.gz", "7b6c89176cda42591b1f1c00129274cc0062b657247664bd7630c4f39420fed9"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.i686-linux-musl-cxx11.tar.gz", "299487819d55d67f64060feb3fdd0132fb23aa93d64dc745e3d2110d3565ad6c"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.i686-w64-mingw32-cxx03.tar.gz", "3233617e7ab41830e7e4bfe6e9e1bf68e48138552e7cd17c5c60216add72d96f"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.i686-w64-mingw32-cxx11.tar.gz", "af3a18d92d105fd5510dc71d7c06353e56c774eb19618c4b73ab245fc08d9c09"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.powerpc64le-linux-gnu-cxx03.tar.gz", "6340226be08f781b165e97a142c13c6c143975157898e8ddc6fc4dc7c56dafc8"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.powerpc64le-linux-gnu-cxx11.tar.gz", "dac940726b1bc39100754017de16a90468b385c1a7aa4fd36881e60c8cb591ab"),
    MacOS(:x86_64) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-apple-darwin.tar.gz", "6616dbf030a48cef2b5c8d0a18809d071baae71ecc7529c5fc42552faf50b841"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-linux-gnu-cxx03.tar.gz", "0f10f9aea88240576894e6cf9258858208106da366ed2f4b3d54fdc3b9ac725d"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-linux-gnu-cxx11.tar.gz", "ebf7168b3f5509e7c0b2867d082ee0567ef87d289c494f7fd9c7e57ae1102231"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-linux-musl-cxx03.tar.gz", "02015558e7364d8986482c2d10ca8549620d76ae87f6a7542cda7a44e02ba24b"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-linux-musl-cxx11.tar.gz", "b0daba32f3e14ff9698d2552259355d2b5c5b88c35ca784a29fe9f2c04d473d6"),
    FreeBSD(:x86_64) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-unknown-freebsd.tar.gz", "62104134b9fedffba9c4b6797db7b4de19fc985e8ca57d24503f1748ae8764a9"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-w64-mingw32-cxx03.tar.gz", "9d629bcf6ec959a97f59e829ab74c1a4fce8ec52ba2b1793aef7b98ab33f9520"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.10.0.x86_64-w64-mingw32-cxx11.tar.gz", "6657e268b941bc572b6e71045b245a962c84fc7bd0d213dad60a8c5df8d5a88d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
