using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libchemfiles"], :libchemfiles),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Chemfiles_jll.jl/releases/download/Chemfiles-v0.9.3+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.aarch64-linux-gnu-cxx03.tar.gz", "83d0d7e54c581bfd46c0d2ac73120970e0578a5f389a1579320cecfb90823ae9"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.aarch64-linux-gnu-cxx11.tar.gz", "524b8befcf4b3420252d8d78baad105d7fd42164460222291cb6711809b195e6"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.aarch64-linux-musl-cxx03.tar.gz", "c41318c22d706cd0fdbec76d69742cb72be6543c4e4448cb029d9ffcc480426a"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.aarch64-linux-musl-cxx11.tar.gz", "d1b6a4e301aeaa43d7fb2921026ba5a88d3fe4c6bb19cb1d6b1a958c11a5a84f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.armv7l-linux-gnueabihf-cxx03.tar.gz", "702f5891e274576eefa41291ba3ac4a27bd648fa5c764c3a46c0c3915315da07"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.armv7l-linux-gnueabihf-cxx11.tar.gz", "09c9511bce0dfa0e0b722dca4bb13fbc0aaa54ec33cf28e13dd013b680a78d5d"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.armv7l-linux-musleabihf-cxx03.tar.gz", "bd5cca9e7b8530bfbad3dbe504fcdcf8eb3c9d45fb232b1cfea4fb92dbe1d30b"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.armv7l-linux-musleabihf-cxx11.tar.gz", "665c3162dff3e4f53124d20569a788413a170c7512c5c0158783fa8c5d5fef82"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.i686-linux-gnu-cxx03.tar.gz", "622173dc0af387ec710db4d2aed0cd1e903a7048dc9b83389960c0bcbce8df10"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.i686-linux-gnu-cxx11.tar.gz", "01dc1eb0e1184c534cf83d47c414681373952bc7198b37e54adb5b2d5b082dd7"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.i686-linux-musl-cxx03.tar.gz", "d8fbfff79252ae8831999681ba583b0893a80d97bffd0f78dd1d9128429bd6a2"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.i686-linux-musl-cxx11.tar.gz", "d704770a2d6f6a225dbe2ca0983923ab5185cb94bad3c78d8e5262e7e58bcb79"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.i686-w64-mingw32-cxx03.tar.gz", "246eecb4d24ba7cc9b5b2558ab452d3d6f9a8882ecfffdf1b9916fbd68c3e972"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.i686-w64-mingw32-cxx11.tar.gz", "2a3429d6afb9fce0fa5652996b42c7414a8fb02dadda2bb003c5bfd18e44189f"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.powerpc64le-linux-gnu-cxx03.tar.gz", "054c44258695fb126b04390f3016e4e67bbdf7d9f1990c97d4a10d26d616d6da"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.powerpc64le-linux-gnu-cxx11.tar.gz", "7a337b16b2541f99c4ba64ed397a682c19d97208c677b3b9a628d273e68d4a8d"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-apple-darwin14-cxx03.tar.gz", "055d39ffe722b8f7cbee24fe85e15778c2aafb56442f248c0cb6eec024ab9a28"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-apple-darwin14-cxx11.tar.gz", "e457010ecb11938f68aad2f84341bf938983c198fe80f121d075ca031039c8f6"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-linux-gnu-cxx03.tar.gz", "bbc88f399a8bfe062a55aff4f48f9ad9e448e94fb95ecf52afaff668030967b7"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-linux-gnu-cxx11.tar.gz", "ace8c5e29d8a74d237d4774056825ede0f1942b77c08162bfd9116746b6c8500"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-linux-musl-cxx03.tar.gz", "992bd5f3849c328a169fa6900d5a36fbb8af624b887757e0cf216393ea002d70"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-linux-musl-cxx11.tar.gz", "5cc14be5eb0a69f75578ad2d15beb683bfe8f488414f8ead7038b678b9434066"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "30ec2080dfe231c6af7c2d69f394560b7a7f9e2ad368b9f75b807860124e2d27"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "fc19145c40de4009b9d7c0a9eae3cb14605ac80b566b4db5dfea00233549ea2f"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-w64-mingw32-cxx03.tar.gz", "40df7a70296bfe10968795d91a1e39523e4e8621e84cb03e115ca9864bd68081"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.3.x86_64-w64-mingw32-cxx11.tar.gz", "563c80767ef8d9144b9231a513a54f886e9b8878356aac0f6ffa139924d74df2"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
