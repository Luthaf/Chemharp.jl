using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libchemfiles"], :libchemfiles),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Chemfiles_jll.jl/releases/download/Chemfiles-v0.9.2+1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.aarch64-linux-gnu-cxx03.tar.gz", "d6de55806fb38fa31a27369568217b01f242a8c20883334eb838f7a53b00df46"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.aarch64-linux-gnu-cxx11.tar.gz", "d779f0b7ce21e033322a4b805dae2bcad79bfeea22d3c0f92655d54ee3fdfc3b"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.aarch64-linux-musl-cxx03.tar.gz", "6925a2c3d6d041eb27669a23778e2e804427b55f5293ca246d3b0fe30ed82f89"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.aarch64-linux-musl-cxx11.tar.gz", "e35e9ddec1b856aae26fd3e575734ca1a187dc5772cff95512a236ceb10dcfbd"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.arm-linux-gnueabihf-cxx03.tar.gz", "fbb1ed83b9e0159dcf87b1aebf6b4ae47e3bf4a9a3255be7e1cfb0bb34dd7d1f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.arm-linux-gnueabihf-cxx11.tar.gz", "0fc936d560f110a670881bb3c6da4b62e991cf33dcdb3aa93887d4bb16cd269a"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.arm-linux-musleabihf-cxx03.tar.gz", "81dcef8f4ba99ddf70f07acc59f9d0f344f861df628916aa8c8c4b0632e23a0b"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.arm-linux-musleabihf-cxx11.tar.gz", "ae121b24cd2eea6354b9d980235fa43ab673d2642baf765fc704cba9a2e28d2c"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.i686-linux-gnu-cxx03.tar.gz", "1c9c7a1a9eb9d1312168c5e5943760c67b057fedb2db7c8fbdf8f8798b592ff9"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.i686-linux-gnu-cxx11.tar.gz", "9d738e4e3ae0709e3716adae3dd936f48b4152629b4591370820ff5a4866df59"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.i686-linux-musl-cxx03.tar.gz", "6232fb5c4b7926ee7902fc035d70433027135d1192c44252f23a1a2a52f21082"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.i686-linux-musl-cxx11.tar.gz", "32463a9bae95ff781c4ccf36c7df671252ff9c74edbb22a3cc88c62c163df32d"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.i686-w64-mingw32-cxx03.tar.gz", "f7b48257d43208fb62e2616bc838812366732070791dbe731487e240a8d717f0"),
    Windows(:i686, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.i686-w64-mingw32-cxx11.tar.gz", "75bf40f2608c19f2e9781425f276c0119fa693e2a3cc2f12e0e8098f1d0438a4"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.powerpc64le-linux-gnu-cxx03.tar.gz", "bbe042a393e5d3ec5fceed870eb9c321c0ede6e0425c67592aea5e04755e4923"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.powerpc64le-linux-gnu-cxx11.tar.gz", "ce029e455cb3a6f6821453e62ab1af24646e9816ee2a0734b83796ac7e2512c9"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-apple-darwin14-cxx03.tar.gz", "13638cde771782c9cd5af333e2bfe8f1c96de55d3d0f5f0303ba1809741a7501"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-apple-darwin14-cxx11.tar.gz", "20d884ecc2eef8c754ee7e1bf86c7a54d812b5dba2816563cc9edf8dac443a11"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-linux-gnu-cxx03.tar.gz", "015f09d71a563fc2502cca395a13fc4f5571ad0a36010ba3eb9cf875d6d85f93"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-linux-gnu-cxx11.tar.gz", "0ae58e00c4a1ee1b9c9b71b810923ebcb73543c54f9e002a8de9f263a7bb1336"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-linux-musl-cxx03.tar.gz", "78cbe51169b64d10c2847226a7bc003a3f1132d5d0d8bc833b399058ef573253"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-linux-musl-cxx11.tar.gz", "71b73823519fc2038eb1b164d81005a04e9081250d7f44077c5613cff0468f76"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-unknown-freebsd11.1-cxx03.tar.gz", "6b067f1041e11666042512f2b0efde37cba06feacf74c38a87f4a4d93a986159"),
    FreeBSD(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-unknown-freebsd11.1-cxx11.tar.gz", "0300ef8bb90e21c5b63ade304456c07b7c90242e1783e9c121e377f66caf897c"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx03)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-w64-mingw32-cxx03.tar.gz", "acc6d6af48ffcf8740fe619119ef5efbbb467cb9ed7b98d8414bb95a15c65c6d"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc_any, :cxx11)) => ("$bin_prefix/Chemfiles.v0.9.2.x86_64-w64-mingw32-cxx11.tar.gz", "d56fd1ab0dbec7346f89a23ea465d7e03d28846557a1d86769b9a44a3e1a7c81"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
